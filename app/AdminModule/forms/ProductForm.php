<?php
namespace App\AdminModule\Forms;


use App\AdminModule\Forms\Interfaces\IProductFormFactory;
use App\AdminModule\Presenters\ProductPresenter;
use App\Model\Entity\Repository\GroupRepository;
use App\Model\Entity\Repository\ProductGroupRepository;
use App\Model\Entity\Repository\ProductRepository;
use App\Model\ProductModel;
use Nette\Application\Application;
use Nette\Application\UI\Control;
use Nette\Application\UI\Form;
use Nette\Application\UI\Presenter;
use Nette\Neon\Exception;

class ProductForm extends Control
{

    /** @var GroupRepository @inject */
    public $groupRepo;

    /** @var ProductModel @inject */
    public $productModel;

//    public function __construct(GroupRepository $groupRepo, ProductModel $productModel)
//    {
//
//        parent::__construct();
//        $this->groupRepo = $groupRepo;
//        $this->productModel = $productModel;
//
//    }

    /**
     * @return Form
     */
    public function create()
    {

        $groupsOfProducts = $this->groupRepo->findAll();

        foreach ($groupsOfProducts as $groupsOfProduct) {
            $groups[ $groupsOfProduct->getId() ] = $groupsOfProduct->getName();
        }

        $form = new Form();

        $form->addText('name', 'Product Name : ')
            ->setRequired('Please enter a name for product;');

        $form->addTextArea('description', 'Product Description : ');

        $form->addMultiSelect('productGroups', 'Group of Product:', $groups);

        $form->addUpload('image', 'Image :');

        $form->addSubmit('save', 'Create new product');

        $form->onSuccess[] = [$this, 'submitProductFormSucceeded'];
        $form->onError[] = [$this, 'onError'];

        return $form;
    }

    public function onError(Form $form)
    {

    }

    public function attached($presenter)
    {
        parent::attached($presenter); // TODO: Change the autogenerated stub

    }

    public function submitProductFormSucceeded(Form $form, $values)
    {
        $this->flashMessage('test');

        $productId = $this->getParameter('productId');
        var_dump($productId);exit;
//        $productId = $this->getPresenter()->getParameter('productId');
        if( $productId )
        {
            $this->productModel->updateWithId($productId, $values);
//            $this->application->getPresenter()->flashMessage('Edit Product Succeeded!', 'product_edit_info');
            $this->getPresenter()->flashMessage('Edit Product Succeeded!', 'product_edit_info');
            $this->application->getPresenter()->redirect("this");
        }
        else
        {

            $this->productModel->addNewProduct($values);
            $this->application->getPresenter()->flashMessage('Create Product Succeeded!', 'product_new_info');
            $this->application->getPresenter()->redirect("Product:new");
        }
    }

}